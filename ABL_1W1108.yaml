substitutions:
  name: abl-1w1108
  device_description: "ABL 1W1108 Electric Vehicle Charger Interface"
  external_components_source: https://github.com/jrv/esphome-abl-emh1

esphome:
  name: ${name}
  comment: ${device_description}
  friendly_name: ABL 1W1108

esp32:
  board: esp32dev

external_components:
  source:
    type: git
    url: ${external_components_source}
    ref: main
  refresh: 0s

wifi:
  ssid: !secret wifi_ssid
  password: !secret wifi_password
  #power_save_mode: none

  ap:
    ssid: "${name} Fallback AP"
    password: !secret wifi_fallback_password

captive_portal:

logger:
  level: INFO

ota:
  platform: esphome
  password: !secret ota_password

web_server:
  port: 80

mqtt:
  broker: !secret mqtt_broker

# Set pins required for LilyGo T-CAN485 board
# taken from https://github.com/elupus/esphome-nibe/blob/master/examples/lilygo-t-can485.yaml#L30
output:
  - platform: gpio
    id: ENABLE_PIN # Enable the chip
    pin:
      number: GPIO19
      inverted: true
  - platform: gpio
    id: SE_PIN # Enable autodirection
    pin:
      number: GPIO17
      inverted: true
  - platform: gpio
    id: ENABLE_5V_PIN # Enable 5V pin for RS485 chip
    pin:
      number: GPIO16
      inverted: true

uart:
  id: modbus_uart
  tx_pin: 22
  rx_pin: 21
  baud_rate: 38400
  stop_bits: 1
  parity: EVEN
  debug:

emh1_modbus:
  uart_id: modbus_uart
  #flow_control_pin: ${flow_control_pin}
  id: modbus0

abl_emh1:
  emh1_modbus_id: modbus0
  update_interval: 5s

preferences:
  flash_write_interval: 60min

globals:
  - id: total_s0_ticks
    type: size_t
    restore_value: no
    initial_value: "0"
  - id: session_s0_ticks
    type: size_t
    restore_value: no
    initial_value: "0"

text_sensor:
  - platform: abl_emh1
    mode:
      name: "Status"

sensor:
  - platform: abl_emh1
    max_current:
      name: "Max current"
      state_class: "measurement"
      id: max_current
      disabled_by_default: true
      accuracy_decimals: 0
    en1_status:
      name: "EN1 status"
      disabled_by_default: true
    en2_status:
      name: "EN2 status"
      disabled_by_default: true
    duty_cycle_reduced:
      name: "Reduced Duty Cycle (max_current)"
      disabled_by_default: true
    ucp_status:
      name: "Ucp Status <= 10V"
      disabled_by_default: true
    outlet_state:
      name: "Outlet state"
      disabled_by_default: true
      id: outlet_state
      on_value:
        lambda: |-
          if(x != 0xC2)
            id(session_s0_ticks) = 0;
  - platform: uptime
    name: Uptime Sensor
    id: abl_uptime
    update_interval: 15s
  - platform: template
    name: "Total S0 Ticks"
    lambda: |-
      return id(total_s0_ticks);
    update_interval: 10s
  - platform: template
    name: "Session S0 Ticks"
    lambda: |-
      return id(session_s0_ticks);
    update_interval: 10s

number:
  - platform: template
    name: "Max Amps"
    id: set_current
    icon: mdi:arrow-oscillating
    min_value: 6
    max_value: 16
    step: 1
    optimistic: false
    lambda: 'return std::lround(id(max_current).state);'
    update_interval: 1s
    set_action:
      lambda: |-
        ESP_LOGD("main", "Sending modbus value = %d", std::lround(x));
        id(modbus0)->send_current(std::lround(x));

switch:
  - platform: template
    name: "Enable"
    id: enable_switch
    icon: "mdi:power"
    lambda: 'return (id(outlet_state).state != 0xE0);'
    turn_off_action:
      - lambda: |-
          if ((id(abl_uptime).state > 10.0) && (id(outlet_state).state != NAN))
            id(modbus0)->send_enable(0);
    turn_on_action:
      - lambda: |-
          if ((id(abl_uptime).state > 10.0) && (id(outlet_state).state != NAN))
            id(modbus0)->send_enable(1);

light:
  - platform: esp32_rmt_led_strip
    rgb_order: GRB # The correct ordering
    pin: 4
    num_leds: 1
    rmt_channel: 0
    chipset: ws2812
    name: "Light"

binary_sensor:
  - platform: gpio
    internal: true
    name: "S0 Meter"
    pin:
      number: GPIO18
      mode:
        input: true
        pullup: true
    on_release:
      lambda: |-
        ESP_LOGD("main", "Energy Meter S0 input on_release");
        id(total_s0_ticks) += 1;
        id(session_s0_ticks) += 1;
